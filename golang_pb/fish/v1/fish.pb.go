// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: fish.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 结构定义
type GameStatus int32

const (
	GameStatus_GameStatus_None GameStatus = 0
	GameStatus_Ready           GameStatus = 1 // 准备阶段
	GameStatus_Showing         GameStatus = 2 // 加载阶段
	GameStatus_Playing         GameStatus = 3 // 游戏中
	GameStatus_Over            GameStatus = 4 // 结算阶段
)

// Enum value maps for GameStatus.
var (
	GameStatus_name = map[int32]string{
		0: "GameStatus_None",
		1: "Ready",
		2: "Showing",
		3: "Playing",
		4: "Over",
	}
	GameStatus_value = map[string]int32{
		"GameStatus_None": 0,
		"Ready":           1,
		"Showing":         2,
		"Playing":         3,
		"Over":            4,
	}
)

func (x GameStatus) Enum() *GameStatus {
	p := new(GameStatus)
	*p = x
	return p
}

func (x GameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fish_proto_enumTypes[0].Descriptor()
}

func (GameStatus) Type() protoreflect.EnumType {
	return &file_fish_proto_enumTypes[0]
}

func (x GameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameStatus.Descriptor instead.
func (GameStatus) EnumDescriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{0}
}

type PlayerType int32

const (
	PlayerType_PlayerType_None PlayerType = 0
	PlayerType_PlayerType_Real PlayerType = 1 // 真实玩家
	PlayerType_PlayerType_AI   PlayerType = 2 // 机器人
)

// Enum value maps for PlayerType.
var (
	PlayerType_name = map[int32]string{
		0: "PlayerType_None",
		1: "PlayerType_Real",
		2: "PlayerType_AI",
	}
	PlayerType_value = map[string]int32{
		"PlayerType_None": 0,
		"PlayerType_Real": 1,
		"PlayerType_AI":   2,
	}
)

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}

func (x PlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_fish_proto_enumTypes[1].Descriptor()
}

func (PlayerType) Type() protoreflect.EnumType {
	return &file_fish_proto_enumTypes[1]
}

func (x PlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerType.Descriptor instead.
func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{1}
}

// BUFF 效果类型
type BuffType int32

const (
	BuffType_BuffType_None  BuffType = 0
	BuffType_BuffType_Skill BuffType = 1 // 技能效果
	BuffType_BuffType_Item  BuffType = 2 // 道具效果
)

// Enum value maps for BuffType.
var (
	BuffType_name = map[int32]string{
		0: "BuffType_None",
		1: "BuffType_Skill",
		2: "BuffType_Item",
	}
	BuffType_value = map[string]int32{
		"BuffType_None":  0,
		"BuffType_Skill": 1,
		"BuffType_Item":  2,
	}
)

func (x BuffType) Enum() *BuffType {
	p := new(BuffType)
	*p = x
	return p
}

func (x BuffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuffType) Descriptor() protoreflect.EnumDescriptor {
	return file_fish_proto_enumTypes[2].Descriptor()
}

func (BuffType) Type() protoreflect.EnumType {
	return &file_fish_proto_enumTypes[2]
}

func (x BuffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuffType.Descriptor instead.
func (BuffType) EnumDescriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{2}
}

// ////////////奖励类型
type RewardType int32

const (
	RewardType_GP          RewardType = 0 //GP
	RewardType_MoonRune    RewardType = 1 //    月光符文
	RewardType_OasisRune   RewardType = 2 // 绿洲符文
	RewardType_IceRune     RewardType = 3 // 冰霜符文
	RewardType_LightRune   RewardType = 4 // 流光符文
	RewardType_StarRune    RewardType = 5 //星空符文
	RewardType_ThunderRune RewardType = 6 //雷霆符文
	RewardType_HotRune     RewardType = 7 // 赤炎符文
	RewardType_PSRune      RewardType = 8 //体力
)

// Enum value maps for RewardType.
var (
	RewardType_name = map[int32]string{
		0: "GP",
		1: "MoonRune",
		2: "OasisRune",
		3: "IceRune",
		4: "LightRune",
		5: "StarRune",
		6: "ThunderRune",
		7: "HotRune",
		8: "PSRune",
	}
	RewardType_value = map[string]int32{
		"GP":          0,
		"MoonRune":    1,
		"OasisRune":   2,
		"IceRune":     3,
		"LightRune":   4,
		"StarRune":    5,
		"ThunderRune": 6,
		"HotRune":     7,
		"PSRune":      8,
	}
)

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_fish_proto_enumTypes[3].Descriptor()
}

func (RewardType) Type() protoreflect.EnumType {
	return &file_fish_proto_enumTypes[3]
}

func (x RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardType.Descriptor instead.
func (RewardType) EnumDescriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{3}
}

type ScGameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 游戏状态| @inject_tag: msgpack:"gameStatus" json:"gameStatus"
	GameStatus GameStatus `protobuf:"varint,1,opt,name=gameStatus,proto3,enum=fish.v1.GameStatus" json:"gameStatus" msgpack:"gameStatus"`
	// 时间戳 | @inject_tag: msgpack:"startTime" json:"startTime"
	StartTime int64 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime" msgpack:"startTime"`
	// 剩余时间 | @inject_tag: msgpack:"suplus" json:"suplus"
	SuplusTime int32 `protobuf:"varint,3,opt,name=suplusTime,proto3" json:"suplus" msgpack:"suplus"`
}

func (x *ScGameStatus) Reset() {
	*x = ScGameStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameStatus) ProtoMessage() {}

func (x *ScGameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameStatus.ProtoReflect.Descriptor instead.
func (*ScGameStatus) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{0}
}

func (x *ScGameStatus) GetGameStatus() GameStatus {
	if x != nil {
		return x.GameStatus
	}
	return GameStatus_GameStatus_None
}

func (x *ScGameStatus) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ScGameStatus) GetSuplusTime() int32 {
	if x != nil {
		return x.SuplusTime
	}
	return 0
}

// 进度加载
type CsLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsLoad) Reset() {
	*x = CsLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsLoad) ProtoMessage() {}

func (x *CsLoad) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsLoad.ProtoReflect.Descriptor instead.
func (*CsLoad) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{1}
}

// 回复确认玩家
type ScLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScLoad) Reset() {
	*x = ScLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScLoad) ProtoMessage() {}

func (x *ScLoad) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScLoad.ProtoReflect.Descriptor instead.
func (*ScLoad) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{2}
}

// 广播操作
type SyncLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncLoad) Reset() {
	*x = SyncLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncLoad) ProtoMessage() {}

func (x *SyncLoad) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncLoad.ProtoReflect.Descriptor instead.
func (*SyncLoad) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{3}
}

type RespGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否需要发csload | @inject_tag: msgpack:"code" json:"code"
	Code     int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code" msgpack:"code"`         // 0 -不需要发 1 - 表示需要发 csload
	PlayerId int32 `protobuf:"varint,2,opt,name=playerId,proto3" json:"playerId,omitempty"` //
}

func (x *RespGameInfo) Reset() {
	*x = RespGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespGameInfo) ProtoMessage() {}

func (x *RespGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespGameInfo.ProtoReflect.Descriptor instead.
func (*RespGameInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{4}
}

func (x *RespGameInfo) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RespGameInfo) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家账号ID| @inject_tag: msgpack:"accountId" json:"accountId"
	AccountId int32 `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId" msgpack:"accountId"`
	// 记录捕鱼次数| @inject_tag: msgpack:"recordNum" json:"recordNum"
	RecordNum int32 `protobuf:"varint,2,opt,name=recordNum,proto3" json:"recordNum" msgpack:"recordNum"`
	// 分数 | @inject_tag: msgpack:"score" json:"score"
	Score int32 `protobuf:"varint,3,opt,name=score,proto3" json:"score" msgpack:"score"`
	// 连击 | @inject_tag: msgpack:"combo" json:"combo"
	Combo int32 `protobuf:"varint,4,opt,name=combo,proto3" json:"combo" msgpack:"combo"`
	// 力度 | @inject_tag: msgpack:"strength" json:"strength"
	Strength int32 `protobuf:"varint,5,opt,name=strength,proto3" json:"strength" msgpack:"strength"`
	// 技能ID | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,6,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
	// 玩家类型 | @inject_tag: msgpack:"playerType" json:"playerType"
	PlayerType PlayerType `protobuf:"varint,7,opt,name=playerType,proto3,enum=fish.v1.PlayerType" json:"playerType" msgpack:"playerType"`
	// y鱼塘的位置 | @inject_tag: msgpack:"playerType" json:"playerType"
	PosY int32 `protobuf:"varint,8,opt,name=posY,proto3" json:"playerType" msgpack:"playerType"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerInfo) GetAccountId() int32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *PlayerInfo) GetRecordNum() int32 {
	if x != nil {
		return x.RecordNum
	}
	return 0
}

func (x *PlayerInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PlayerInfo) GetCombo() int32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

func (x *PlayerInfo) GetStrength() int32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *PlayerInfo) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *PlayerInfo) GetPlayerType() PlayerType {
	if x != nil {
		return x.PlayerType
	}
	return PlayerType_PlayerType_None
}

func (x *PlayerInfo) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

type ScPlayerInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家信息 | @inject_tag: msgpack:"playerInfos" json:"playerInfos"
	PlayerInfos []*PlayerInfo `protobuf:"bytes,1,rep,name=playerInfos,proto3" json:"playerInfos" msgpack:"playerInfos"`
}

func (x *ScPlayerInfos) Reset() {
	*x = ScPlayerInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPlayerInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPlayerInfos) ProtoMessage() {}

func (x *ScPlayerInfos) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPlayerInfos.ProtoReflect.Descriptor instead.
func (*ScPlayerInfos) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{6}
}

func (x *ScPlayerInfos) GetPlayerInfos() []*PlayerInfo {
	if x != nil {
		return x.PlayerInfos
	}
	return nil
}

// 技能能BUF信息
type BuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// buff 配置ID | @inject_tag: msgpack:"buffId" json:"buffId"
	BuffId int32 `protobuf:"varint,1,opt,name=buffId,proto3" json:"buffId" msgpack:"buffId"` // buff 配置ID
	// buff 起效时间 | @inject_tag: msgpack:"BuffStartTime" json:"BuffStartTime"
	BuffStartTime int64 `protobuf:"varint,2,opt,name=BuffStartTime,proto3" json:"BuffStartTime" msgpack:"BuffStartTime"` // buff 起效时间
	// buff 有效时间 | @inject_tag: msgpack:"BuffExpire" json:"BuffExpire"
	BuffExpire int32 `protobuf:"varint,3,opt,name=BuffExpire,proto3" json:"BuffExpire" msgpack:"BuffExpire"` // buff 有效时间
	// buff 受影响的ID | @inject_tag: msgpack:"affectorId" json:"affectorId"
	AffectorId int32 `protobuf:"varint,4,opt,name=affectorId,proto3" json:"affectorId" msgpack:"affectorId"` // buff 受影响的ID
	// buff 值 | @inject_tag: msgpack:"bufVal" json:"bufVal"
	BufVal int32 `protobuf:"varint,5,opt,name=bufVal,proto3" json:"bufVal" msgpack:"bufVal"` // buff 值
	// buff 类型 | @inject_tag: msgpack:"bufType" json:"bufType"
	BufType BuffType `protobuf:"varint,6,opt,name=bufType,proto3,enum=fish.v1.BuffType" json:"bufType" msgpack:"bufType"` // buff 类型
	// buff 发起者 | @inject_tag: msgpack:"buffCreator" json:"buffCreator"
	BuffCreator int32 `protobuf:"varint,7,opt,name=buffCreator,proto3" json:"buffCreator" msgpack:"buffCreator"`
	// 配表ID | @inject_tag: msgpack:"ConfigId" json:"ConfigId"
	ConfigId int32 `protobuf:"varint,8,opt,name=ConfigId,proto3" json:"ConfigId" msgpack:"ConfigId"`
}

func (x *BuffInfo) Reset() {
	*x = BuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffInfo) ProtoMessage() {}

func (x *BuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffInfo.ProtoReflect.Descriptor instead.
func (*BuffInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{7}
}

func (x *BuffInfo) GetBuffId() int32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *BuffInfo) GetBuffStartTime() int64 {
	if x != nil {
		return x.BuffStartTime
	}
	return 0
}

func (x *BuffInfo) GetBuffExpire() int32 {
	if x != nil {
		return x.BuffExpire
	}
	return 0
}

func (x *BuffInfo) GetAffectorId() int32 {
	if x != nil {
		return x.AffectorId
	}
	return 0
}

func (x *BuffInfo) GetBufVal() int32 {
	if x != nil {
		return x.BufVal
	}
	return 0
}

func (x *BuffInfo) GetBufType() BuffType {
	if x != nil {
		return x.BufType
	}
	return BuffType_BuffType_None
}

func (x *BuffInfo) GetBuffCreator() int32 {
	if x != nil {
		return x.BuffCreator
	}
	return 0
}

func (x *BuffInfo) GetConfigId() int32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

// 同步BUff
type ScBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// buff特效 | @inject_tag: msgpack:"buffInfos" json:"buffInfos"
	BuffInfos []*BuffInfo `protobuf:"bytes,1,rep,name=buffInfos,proto3" json:"buffInfos" msgpack:"buffInfos"`
	// buff类型 | @inject_tag: msgpack:"buffType" json:"buffType"
	BuffType BuffType `protobuf:"varint,2,opt,name=buffType,proto3,enum=fish.v1.BuffType" json:"buffType" msgpack:"buffType"`
}

func (x *ScBuffInfo) Reset() {
	*x = ScBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScBuffInfo) ProtoMessage() {}

func (x *ScBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScBuffInfo.ProtoReflect.Descriptor instead.
func (*ScBuffInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{8}
}

func (x *ScBuffInfo) GetBuffInfos() []*BuffInfo {
	if x != nil {
		return x.BuffInfos
	}
	return nil
}

func (x *ScBuffInfo) GetBuffType() BuffType {
	if x != nil {
		return x.BuffType
	}
	return BuffType_BuffType_None
}

// 鱼塘信息
type FishPondInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// posX | @inject_tag: msgpack:"posX" json:"posX"
	PosX int32 `protobuf:"varint,1,opt,name=posX,proto3" json:"posX" msgpack:"posX"`
	// posY | @inject_tag: msgpack:"posY" json:"posY"
	PosY int32 `protobuf:"varint,2,opt,name=posY,proto3" json:"posY" msgpack:"posY"`
	// 鱼塘半径 | @inject_tag: msgpack:"radius" json:"radius"
	Radius int32 `protobuf:"varint,3,opt,name=radius,proto3" json:"radius" msgpack:"radius"`
}

func (x *FishPondInfo) Reset() {
	*x = FishPondInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPondInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPondInfo) ProtoMessage() {}

func (x *FishPondInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPondInfo.ProtoReflect.Descriptor instead.
func (*FishPondInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{9}
}

func (x *FishPondInfo) GetPosX() int32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *FishPondInfo) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *FishPondInfo) GetRadius() int32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type FishGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 鱼组 | @inject_tag: msgpack:"groupId" json:"groupId"
	GroupId int32 `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId" msgpack:"groupId"`
	// 间隔时间 | @inject_tag: msgpack:"gapTime" json:"gapTime"
	GapTime int32 `protobuf:"varint,3,opt,name=gapTime,proto3" json:"gapTime" msgpack:"gapTime"`
	// 汇聚时间 | @inject_tag: msgpack:"gatherTime" json:"gatherTime"
	GatherTime int32 `protobuf:"varint,4,opt,name=gatherTime,proto3" json:"gatherTime" msgpack:"gatherTime"`
	// 鱼信息 | @inject_tag: msgpack:"fishInfos" json:"fishInfos"
	FishInfos []*FishInfo `protobuf:"bytes,5,rep,name=fishInfos,proto3" json:"fishInfos" msgpack:"fishInfos"`
}

func (x *FishGroupInfo) Reset() {
	*x = FishGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishGroupInfo) ProtoMessage() {}

func (x *FishGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishGroupInfo.ProtoReflect.Descriptor instead.
func (*FishGroupInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{10}
}

func (x *FishGroupInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FishGroupInfo) GetGapTime() int32 {
	if x != nil {
		return x.GapTime
	}
	return 0
}

func (x *FishGroupInfo) GetGatherTime() int32 {
	if x != nil {
		return x.GatherTime
	}
	return 0
}

func (x *FishGroupInfo) GetFishInfos() []*FishInfo {
	if x != nil {
		return x.FishInfos
	}
	return nil
}

// 鱼的信息
type FishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 鱼池Id | @inject_tag: msgpack:"fishId" json:"fishId"
	FishId int32 `protobuf:"varint,1,opt,name=fishId,proto3" json:"fishId" msgpack:"fishId"`
	// posX | @inject_tag: msgpack:"posX" json:"posX"
	PosX int32 `protobuf:"varint,2,opt,name=posX,proto3" json:"posX" msgpack:"posX"`
	// posY | @inject_tag: msgpack:"posY" json:"posY"
	PosY int32 `protobuf:"varint,3,opt,name=posY,proto3" json:"posY" msgpack:"posY"`
	// 鱼类数量 | @inject_tag: msgpack:"num" json:"num"
	Num int32 `protobuf:"varint,4,opt,name=num,proto3" json:"num" msgpack:"num"`
}

func (x *FishInfo) Reset() {
	*x = FishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishInfo) ProtoMessage() {}

func (x *FishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishInfo.ProtoReflect.Descriptor instead.
func (*FishInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{11}
}

func (x *FishInfo) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *FishInfo) GetPosX() int32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *FishInfo) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *FishInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// 游戏开始
type ScGameStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 游戏开始时间 | @inject_tag: msgpack:"gameStartTime" json:"gameStartTime"
	GameStartTime int64 `protobuf:"varint,1,opt,name=gameStartTime,proto3" json:"gameStartTime" msgpack:"gameStartTime"`
	// PVE 或PVP关卡ID | @inject_tag: msgpack:"levelId" json:"levelId"
	LevelId int32 `protobuf:"varint,2,opt,name=levelId,proto3" json:"levelId" msgpack:"levelId"`
}

func (x *ScGameStart) Reset() {
	*x = ScGameStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameStart) ProtoMessage() {}

func (x *ScGameStart) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameStart.ProtoReflect.Descriptor instead.
func (*ScGameStart) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{12}
}

func (x *ScGameStart) GetGameStartTime() int64 {
	if x != nil {
		return x.GameStartTime
	}
	return 0
}

func (x *ScGameStart) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type ScFishSceneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 鱼池Id | @inject_tag: msgpack:"fishGroupInfos" json:"fishGroupInfos"
	FishGroupInfos []*FishGroupInfo `protobuf:"bytes,1,rep,name=fishGroupInfos,proto3" json:"fishGroupInfos" msgpack:"fishGroupInfos"`
	// 鱼塘 | @inject_tag: msgpack:"fisnPondInfo" json:"fisnPondInfo"
	FisnPondInfo *FishPondInfo `protobuf:"bytes,2,opt,name=fisnPondInfo,proto3" json:"fisnPondInfo" msgpack:"fisnPondInfo"`
}

func (x *ScFishSceneInfo) Reset() {
	*x = ScFishSceneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScFishSceneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScFishSceneInfo) ProtoMessage() {}

func (x *ScFishSceneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScFishSceneInfo.ProtoReflect.Descriptor instead.
func (*ScFishSceneInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{13}
}

func (x *ScFishSceneInfo) GetFishGroupInfos() []*FishGroupInfo {
	if x != nil {
		return x.FishGroupInfos
	}
	return nil
}

func (x *ScFishSceneInfo) GetFisnPondInfo() *FishPondInfo {
	if x != nil {
		return x.FisnPondInfo
	}
	return nil
}

// 捕鱼操作
type CsFish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 力度 | @inject_tag: msgpack:"strength" json:"strength"
	Strength int32 `protobuf:"varint,1,opt,name=strength,proto3" json:"strength" msgpack:"strength"`
}

func (x *CsFish) Reset() {
	*x = CsFish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsFish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsFish) ProtoMessage() {}

func (x *CsFish) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsFish.ProtoReflect.Descriptor instead.
func (*CsFish) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{14}
}

func (x *CsFish) GetStrength() int32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

type CatchFishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 鱼表 | @inject_tag: msgpack:"fishId" json:"fishId"
	FishId int32 `protobuf:"varint,1,opt,name=fishId,proto3" json:"fishId" msgpack:"fishId"`
	// 捕鱼分数 | @inject_tag: msgpack:"score" json:"score"
	Score int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score" msgpack:"score"`
	// 数量 | @inject_tag: msgpack:"num" json:"num"
	Num int32 `protobuf:"varint,3,opt,name=num,proto3" json:"num" msgpack:"num"`
}

func (x *CatchFishInfo) Reset() {
	*x = CatchFishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatchFishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatchFishInfo) ProtoMessage() {}

func (x *CatchFishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatchFishInfo.ProtoReflect.Descriptor instead.
func (*CatchFishInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{15}
}

func (x *CatchFishInfo) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *CatchFishInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CatchFishInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type ScFish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 捕鱼返回的信息 | @inject_tag: msgpack:"catchFishInfos" json:"catchFishInfos"
	CatchFishInfos []*CatchFishInfo `protobuf:"bytes,1,rep,name=catchFishInfos,proto3" json:"catchFishInfos" msgpack:"catchFishInfos"`
}

func (x *ScFish) Reset() {
	*x = ScFish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScFish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScFish) ProtoMessage() {}

func (x *ScFish) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScFish.ProtoReflect.Descriptor instead.
func (*ScFish) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{16}
}

func (x *ScFish) GetCatchFishInfos() []*CatchFishInfo {
	if x != nil {
		return x.CatchFishInfos
	}
	return nil
}

// 技能操作
type CsOperateSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 技能ID | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,1,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
}

func (x *CsOperateSkill) Reset() {
	*x = CsOperateSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsOperateSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsOperateSkill) ProtoMessage() {}

func (x *CsOperateSkill) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsOperateSkill.ProtoReflect.Descriptor instead.
func (*CsOperateSkill) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{17}
}

func (x *CsOperateSkill) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

type CsOperateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 技能ID | @inject_tag: msgpack:"skillId" json:"skillId"
	SkillId int32 `protobuf:"varint,1,opt,name=skillId,proto3" json:"skillId" msgpack:"skillId"`
}

func (x *CsOperateItem) Reset() {
	*x = CsOperateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsOperateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsOperateItem) ProtoMessage() {}

func (x *CsOperateItem) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsOperateItem.ProtoReflect.Descriptor instead.
func (*CsOperateItem) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{18}
}

func (x *CsOperateItem) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

type RewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 奖励类型 | @inject_tag: msgpack:"rewardType" json:"rewardType"
	RewardType RewardType `protobuf:"varint,1,opt,name=rewardType,proto3,enum=fish.v1.RewardType" json:"rewardType" msgpack:"rewardType"`
	// 奖励数量 | @inject_tag: msgpack:"num" json:"num"
	Num int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num" msgpack:"num"`
}

func (x *RewardInfo) Reset() {
	*x = RewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfo) ProtoMessage() {}

func (x *RewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfo.ProtoReflect.Descriptor instead.
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{19}
}

func (x *RewardInfo) GetRewardType() RewardType {
	if x != nil {
		return x.RewardType
	}
	return RewardType_GP
}

func (x *RewardInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// 奖励推送
type ScRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 奖励信息 | @inject_tag: msgpack:"rewardInfo" json:"rewardInfo"
	RewardInfos []*RewardInfo `protobuf:"bytes,1,rep,name=rewardInfos,proto3" json:"rewardInfo" msgpack:"rewardInfo"`
}

func (x *ScRewardInfo) Reset() {
	*x = ScRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScRewardInfo) ProtoMessage() {}

func (x *ScRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScRewardInfo.ProtoReflect.Descriptor instead.
func (*ScRewardInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{20}
}

func (x *ScRewardInfo) GetRewardInfos() []*RewardInfo {
	if x != nil {
		return x.RewardInfos
	}
	return nil
}

type ScPveGameOverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 获得鱼 | @inject_tag: msgpack:"fishInfos" json:"fishInfos"
	FishInfos []*FishInfo `protobuf:"bytes,1,rep,name=fishInfos,proto3" json:"fishInfos" msgpack:"fishInfos"`
	// 奖励 | @inject_tag: msgpack:"rewardInfos" json:"rewardInfos"
	RewardInfos []*RewardInfo `protobuf:"bytes,2,rep,name=rewardInfos,proto3" json:"rewardInfos" msgpack:"rewardInfos"`
	// 分数 | @inject_tag: msgpack:"score" json:"score"
	Score int32 `protobuf:"varint,3,opt,name=score,proto3" json:"score" msgpack:"score"`
	// 最高分数 | @inject_tag: msgpack:"hignScore" json:"hignScore"
	HignScore int32 `protobuf:"varint,4,opt,name=hignScore,proto3" json:"hignScore" msgpack:"hignScore"`
}

func (x *ScPveGameOverInfo) Reset() {
	*x = ScPveGameOverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPveGameOverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPveGameOverInfo) ProtoMessage() {}

func (x *ScPveGameOverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPveGameOverInfo.ProtoReflect.Descriptor instead.
func (*ScPveGameOverInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{21}
}

func (x *ScPveGameOverInfo) GetFishInfos() []*FishInfo {
	if x != nil {
		return x.FishInfos
	}
	return nil
}

func (x *ScPveGameOverInfo) GetRewardInfos() []*RewardInfo {
	if x != nil {
		return x.RewardInfos
	}
	return nil
}

func (x *ScPveGameOverInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ScPveGameOverInfo) GetHignScore() int32 {
	if x != nil {
		return x.HignScore
	}
	return 0
}

type PvpRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家ID | @inject_tag: msgpack:"playerId" json:"playerId"
	PlayerId int32 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId" msgpack:"playerId"`
	// 分数 | @inject_tag: msgpack:"score" json:"score"
	Score int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score" msgpack:"score"`
	// 排名 | @inject_tag: msgpack:"rankNo" json:"rankNo"
	RankNo int32 `protobuf:"varint,3,opt,name=rankNo,proto3" json:"rankNo" msgpack:"rankNo"`
}

func (x *PvpRankInfo) Reset() {
	*x = PvpRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRankInfo) ProtoMessage() {}

func (x *PvpRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRankInfo.ProtoReflect.Descriptor instead.
func (*PvpRankInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{22}
}

func (x *PvpRankInfo) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PvpRankInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PvpRankInfo) GetRankNo() int32 {
	if x != nil {
		return x.RankNo
	}
	return 0
}

type ScPvpRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 排行类型 | @inject_tag: msgpack:"rankInfos" json:"rankInfos"
	RankInfos []*PvpRankInfo `protobuf:"bytes,1,rep,name=rankInfos,proto3" json:"rankInfos" msgpack:"rankInfos"`
}

func (x *ScPvpRank) Reset() {
	*x = ScPvpRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPvpRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPvpRank) ProtoMessage() {}

func (x *ScPvpRank) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPvpRank.ProtoReflect.Descriptor instead.
func (*ScPvpRank) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{23}
}

func (x *ScPvpRank) GetRankInfos() []*PvpRankInfo {
	if x != nil {
		return x.RankInfos
	}
	return nil
}

type PvpGameOverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家ID | @inject_tag: msgpack:"playerId" json:"playerId"
	PlayerId int32 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId" msgpack:"playerId"`
	// 分数 | @inject_tag: msgpack:"score" json:"score"
	Score int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score" msgpack:"score"`
	// 排名 | @inject_tag: msgpack:"rankNo" json:"rankNo"
	RankNo int32 `protobuf:"varint,3,opt,name=rankNo,proto3" json:"rankNo" msgpack:"rankNo"`
	// 完美次数 | @inject_tag: msgpack:"perfectScore" json:"perfectScore"
	PerfectNum int32 `protobuf:"varint,4,opt,name=perfectNum,proto3" json:"perfectScore" msgpack:"perfectScore"`
	// 连击次数 | @inject_tag: msgpack:"comobScore" json:"comobScore"
	ComobNum int32 `protobuf:"varint,5,opt,name=comobNum,proto3" json:"comobScore" msgpack:"comobScore"`
}

func (x *PvpGameOverInfo) Reset() {
	*x = PvpGameOverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpGameOverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpGameOverInfo) ProtoMessage() {}

func (x *PvpGameOverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpGameOverInfo.ProtoReflect.Descriptor instead.
func (*PvpGameOverInfo) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{24}
}

func (x *PvpGameOverInfo) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PvpGameOverInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PvpGameOverInfo) GetRankNo() int32 {
	if x != nil {
		return x.RankNo
	}
	return 0
}

func (x *PvpGameOverInfo) GetPerfectNum() int32 {
	if x != nil {
		return x.PerfectNum
	}
	return 0
}

func (x *PvpGameOverInfo) GetComobNum() int32 {
	if x != nil {
		return x.ComobNum
	}
	return 0
}

type ScPvpGameOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家结算 | @inject_tag: msgpack:"gameOverInfos" json:"gameOverInfos"
	GameOverInfos []*PvpGameOverInfo `protobuf:"bytes,1,rep,name=gameOverInfos,proto3" json:"gameOverInfos" msgpack:"gameOverInfos"`
}

func (x *ScPvpGameOver) Reset() {
	*x = ScPvpGameOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPvpGameOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPvpGameOver) ProtoMessage() {}

func (x *ScPvpGameOver) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPvpGameOver.ProtoReflect.Descriptor instead.
func (*ScPvpGameOver) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{25}
}

func (x *ScPvpGameOver) GetGameOverInfos() []*PvpGameOverInfo {
	if x != nil {
		return x.GameOverInfos
	}
	return nil
}

// 离开,退出游戏
type CsLeaveGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CsLeaveGame) Reset() {
	*x = CsLeaveGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fish_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsLeaveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsLeaveGame) ProtoMessage() {}

func (x *CsLeaveGame) ProtoReflect() protoreflect.Message {
	mi := &file_fish_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsLeaveGame.ProtoReflect.Descriptor instead.
func (*CsLeaveGame) Descriptor() ([]byte, []int) {
	return file_fish_proto_rawDescGZIP(), []int{26}
}

var File_fish_proto protoreflect.FileDescriptor

var file_fish_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70,
	0x6c, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x75, 0x70, 0x6c, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x08, 0x0a, 0x06, 0x43, 0x73, 0x4c,
	0x6f, 0x61, 0x64, 0x22, 0x08, 0x0a, 0x06, 0x53, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0x0a, 0x0a,
	0x08, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x70, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x0a, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6d, 0x62, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x73, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x59, 0x22,
	0x46, 0x0a, 0x0d, 0x53, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x08, 0x42, 0x75, 0x66, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x75, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x75, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x56, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x66, 0x56, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x75,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x62, 0x75, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75,
	0x66, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0a, 0x53, 0x63, 0x42, 0x75, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x0c, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x59, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x59, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x67, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x69, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66,
	0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x66, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5c, 0x0a, 0x08, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x73, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x73, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x73, 0x59, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x0b, 0x53, 0x63, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x46, 0x69,
	0x73, 0x68, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x66,
	0x69, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x69, 0x73,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x66,
	0x69, 0x73, 0x6e, 0x50, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68,
	0x50, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x69, 0x73, 0x6e, 0x50, 0x6f,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x06, 0x43, 0x73, 0x46, 0x69, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x4f, 0x0a, 0x0d,
	0x43, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x48, 0x0a,
	0x06, 0x53, 0x63, 0x46, 0x69, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0d, 0x43, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x53,
	0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x22, 0x45, 0x0a, 0x0c, 0x53, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x53,
	0x63, 0x50, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2f, 0x0a, 0x09, 0x66, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x68, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x57, 0x0a, 0x0b,
	0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x22, 0x3f, 0x0a, 0x09, 0x53, 0x63, 0x50, 0x76, 0x70, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x61, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x50, 0x76, 0x70, 0x47, 0x61,
	0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61,
	0x6e, 0x6b, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6f, 0x62, 0x4e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6f, 0x62, 0x4e, 0x75, 0x6d,
	0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x63, 0x50, 0x76, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x76, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x73, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x2a, 0x50, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x76, 0x65, 0x72,
	0x10, 0x04, 0x2a, 0x49, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x49, 0x10, 0x02, 0x2a, 0x44, 0x0a,
	0x08, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x75, 0x66,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x74, 0x65,
	0x6d, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x50, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x61, 0x73, 0x69,
	0x73, 0x52, 0x75, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x63, 0x65, 0x52, 0x75,
	0x6e, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x75, 0x6e,
	0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x52, 0x75, 0x6e, 0x65, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x65,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x65, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x53, 0x52, 0x75, 0x6e, 0x65, 0x10, 0x08, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x78, 0x79, 0x2f, 0x62, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66,
	0x69, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_fish_proto_rawDescOnce sync.Once
	file_fish_proto_rawDescData = file_fish_proto_rawDesc
)

func file_fish_proto_rawDescGZIP() []byte {
	file_fish_proto_rawDescOnce.Do(func() {
		file_fish_proto_rawDescData = protoimpl.X.CompressGZIP(file_fish_proto_rawDescData)
	})
	return file_fish_proto_rawDescData
}

var file_fish_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_fish_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_fish_proto_goTypes = []interface{}{
	(GameStatus)(0),           // 0: fish.v1.GameStatus
	(PlayerType)(0),           // 1: fish.v1.PlayerType
	(BuffType)(0),             // 2: fish.v1.BuffType
	(RewardType)(0),           // 3: fish.v1.RewardType
	(*ScGameStatus)(nil),      // 4: fish.v1.ScGameStatus
	(*CsLoad)(nil),            // 5: fish.v1.CsLoad
	(*ScLoad)(nil),            // 6: fish.v1.ScLoad
	(*SyncLoad)(nil),          // 7: fish.v1.SyncLoad
	(*RespGameInfo)(nil),      // 8: fish.v1.RespGameInfo
	(*PlayerInfo)(nil),        // 9: fish.v1.PlayerInfo
	(*ScPlayerInfos)(nil),     // 10: fish.v1.ScPlayerInfos
	(*BuffInfo)(nil),          // 11: fish.v1.BuffInfo
	(*ScBuffInfo)(nil),        // 12: fish.v1.ScBuffInfo
	(*FishPondInfo)(nil),      // 13: fish.v1.FishPondInfo
	(*FishGroupInfo)(nil),     // 14: fish.v1.FishGroupInfo
	(*FishInfo)(nil),          // 15: fish.v1.FishInfo
	(*ScGameStart)(nil),       // 16: fish.v1.ScGameStart
	(*ScFishSceneInfo)(nil),   // 17: fish.v1.ScFishSceneInfo
	(*CsFish)(nil),            // 18: fish.v1.CsFish
	(*CatchFishInfo)(nil),     // 19: fish.v1.CatchFishInfo
	(*ScFish)(nil),            // 20: fish.v1.ScFish
	(*CsOperateSkill)(nil),    // 21: fish.v1.CsOperateSkill
	(*CsOperateItem)(nil),     // 22: fish.v1.CsOperateItem
	(*RewardInfo)(nil),        // 23: fish.v1.RewardInfo
	(*ScRewardInfo)(nil),      // 24: fish.v1.ScRewardInfo
	(*ScPveGameOverInfo)(nil), // 25: fish.v1.ScPveGameOverInfo
	(*PvpRankInfo)(nil),       // 26: fish.v1.PvpRankInfo
	(*ScPvpRank)(nil),         // 27: fish.v1.ScPvpRank
	(*PvpGameOverInfo)(nil),   // 28: fish.v1.PvpGameOverInfo
	(*ScPvpGameOver)(nil),     // 29: fish.v1.ScPvpGameOver
	(*CsLeaveGame)(nil),       // 30: fish.v1.CsLeaveGame
}
var file_fish_proto_depIdxs = []int32{
	0,  // 0: fish.v1.ScGameStatus.gameStatus:type_name -> fish.v1.GameStatus
	1,  // 1: fish.v1.PlayerInfo.playerType:type_name -> fish.v1.PlayerType
	9,  // 2: fish.v1.ScPlayerInfos.playerInfos:type_name -> fish.v1.PlayerInfo
	2,  // 3: fish.v1.BuffInfo.bufType:type_name -> fish.v1.BuffType
	11, // 4: fish.v1.ScBuffInfo.buffInfos:type_name -> fish.v1.BuffInfo
	2,  // 5: fish.v1.ScBuffInfo.buffType:type_name -> fish.v1.BuffType
	15, // 6: fish.v1.FishGroupInfo.fishInfos:type_name -> fish.v1.FishInfo
	14, // 7: fish.v1.ScFishSceneInfo.fishGroupInfos:type_name -> fish.v1.FishGroupInfo
	13, // 8: fish.v1.ScFishSceneInfo.fisnPondInfo:type_name -> fish.v1.FishPondInfo
	19, // 9: fish.v1.ScFish.catchFishInfos:type_name -> fish.v1.CatchFishInfo
	3,  // 10: fish.v1.RewardInfo.rewardType:type_name -> fish.v1.RewardType
	23, // 11: fish.v1.ScRewardInfo.rewardInfos:type_name -> fish.v1.RewardInfo
	15, // 12: fish.v1.ScPveGameOverInfo.fishInfos:type_name -> fish.v1.FishInfo
	23, // 13: fish.v1.ScPveGameOverInfo.rewardInfos:type_name -> fish.v1.RewardInfo
	26, // 14: fish.v1.ScPvpRank.rankInfos:type_name -> fish.v1.PvpRankInfo
	28, // 15: fish.v1.ScPvpGameOver.gameOverInfos:type_name -> fish.v1.PvpGameOverInfo
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_fish_proto_init() }
func file_fish_proto_init() {
	if File_fish_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fish_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPlayerInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPondInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScFishSceneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsFish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatchFishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScFish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsOperateSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsOperateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPveGameOverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPvpRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpGameOverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPvpGameOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fish_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsLeaveGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fish_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fish_proto_goTypes,
		DependencyIndexes: file_fish_proto_depIdxs,
		EnumInfos:         file_fish_proto_enumTypes,
		MessageInfos:      file_fish_proto_msgTypes,
	}.Build()
	File_fish_proto = out.File
	file_fish_proto_rawDesc = nil
	file_fish_proto_goTypes = nil
	file_fish_proto_depIdxs = nil
}
